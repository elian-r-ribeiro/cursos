while: quantidade de repetições não definida, nenhuma vez ou determinadas vezes;

do while: quantidade de repetições não definida, uma vez ou determinadas vezes;

for: quantidade de repetições definida;

for(int variável = valor; enquanto variável menor que 10; variável++);

Variáveis criadas dentro dos "parâmetros" do for, não pode ser utilizada fora
para outra coisa além do contador, caso seja necessário, ela deve ser inicializada
antes do for;

No switch case, o bloco "default", caso esteja na última opção, não é necessário
utilizar break, caso esteja um pouco acima, é necessário;

A diferença do break e do continue, é que o break finaliza o laço todo, enquanto o
continue, apenas pula a repetição atual;

Utilizar o break ou continue rotulados não é uma boa prática e deve ser evitado;

Não crie funções que deem System.out.print..., pois isso deixa a função
inútil ao utilizar algum tipo de interface;

Caso você utilize algo como i = 1 e x = i, cada variável será um valor diferente,
sendo que alterações feito em uma, não irá mudar outra, se você utilizar algo como
Data d1 = new Data() e Data d2 = d1, isso irá não criar uma cópia do valor, mas sim
irá apontar para o valor do primeiro, ou seja, se eu fizer uma alteração em d1, isso
afetará d2, e se eu fizer uma alteração em d2, isso afetará d1;

Mesmo que o método estático esteja dentro da classe, uma variável não estática
só é possível acessá-la criando um objeto, ou transformando ela em estática também;
 
Variáveis criadas dentro de métodos, só podem ser utilizadas dentro do método que
foi criada, e só pode ser usada APÓS a sua declaração, elas também não possuem
um valor inicial, é obrigatório iniciá-las, o mesmo vale para os parâmetros dos 
métodos e construtores;

"Variáveis constantes" é obrigatório inicializá-la em algum momento no código;

Variáveis não locais alteradas dentro de "for" e "while" permanecem com o valor alterado
durante toda a execução;

Diferença entre os tipos de "arrays":
Set: não pode ser ordenado, nem pode-se obter por índice;
List: pode ser ordenado, e pode-se obter por índice;
Queue: o primeiro elemento a entrar na fila, será o primeiro a sair (first-in, first-out(
fifo));
Stack: o último elemento a entrar na pelha, será o primeiro a sair (last-in, first-out(
lifo));
Map: é uma estrutura "chave-valor", onde dentro dele eu tenho dois valores(ex:
id e nome), no qual a chave será uma espécie de "identificador", que não pode ser
duplicado, e ele não pode ser ordenado.

Utilizar Set, List, Map, etc, heterogêneos (com mais de um tipo) não é uma boa prática
e deve ser evitado ao máximo;

Utilizando filas, o método .add, caso a fila esteja cheia, ele dará um erro, já o método
.offer, não irá gerar esse erro, mas sim retornar true ou false;

Utilizando filas, o método .peek, caso a fila esteja vazia, retorna null,
enquanto o .element irá gerar um erro;

Em filas, enquanto o .peek e o .element apenas retornam o primeiro elemento da fila
sem removê-lo, o .poll e o .remove irão não apenas retornar o primeiro elemento da fila, 
mas também irá removê-lo, e, quando a fila estiver vazia, o .poll irá retornar nulo,
enquanto o .remove irá gerar um erro;

Em pilhas, o .add retorna true ou false se conseguir ou não adicionar um elemento
na pilha, enquanto o .push retorna um erro;

Em pilhas, o .peek, .element, .poll e .remove funcionam da mesma maneira que na 
fila (linha 62);

Em pilhas, o .pop faz basicamente a mesma coisa que o .remove (linha 62);

Em Map, não utilizamos o .add, e sim o .put, ele não só serve para adicionar um valor,
mas também pode substituir um valor já existente;

Para criar um for-each que percorre tanto a chave quanto o valor para um map, devemos 
utiliza a estrutura for(Entry<tipo, tipo> nome: nome.entrySet()){};

Inplementações de tipos de "arrays":
Set: HashSet<tipo> nome = new HashSet<>();
List: List<tipo> nome = new ArrayList<>();
Queue: Queue<tipo> nome = new LinkedList<>();
Stack: Deque<tipo> nome = new ArrayDeque<>();
Map: Map<tipo, tipo> nome = new HashMap<>().

"%" para cada tipo de dado no .format:
%d: Formatação para números inteiros (int);
%f: Formatação para números de ponto flutuante (float ou double);
%s: Formatação para strings;
%c: Formatação para caracteres (char);
%b: Formatação para valores booleanos;
%n: Inserção de uma quebra de linha.

Valores iniciais para cada variável (caso você não informe um valor inicial):
byte, short, int, long -> 0;
float, double -> 0.0;
boolean -> false;
char -> "\u0000".